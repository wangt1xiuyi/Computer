1.递归倒置
#include<iostream>
using namespace std;
void swap(int &a, int &b)
{
	int c;
	c = a;
	a = b;
	b = c;
}
void reverse(int *p,int b,int c)
{
	if (b < c)
	{
		swap(p[b], p[c]);
		reverse(p, ++b, --c);
	}
	
}
int main()
{
	int a[] = {1,5,2,5,4,1,2,6,9,7};
	reverse(a, 0, 9);
	for(int i=0;i<10;++i)
	cout << a[i] << " ";
	cout << endl;
}
2.递归实现2^n
#include<iostream>
using namespace std;
int power(int n)
{
	if (n < 1)
	{
		return 1;
	}
	else
		return 2 * power(n - 1);
}
int main()
{
	int b;
	cin >> b;
	int a = power(b);
		cout << a << endl;
}
3.递归求数组和
#include<iostream>
using namespace std;
int sum(int *p, int b, int c)
{
	if (b == c)
	{
		return p[b];
	}
	else
	{
		int h = (b + c) / 2;
			return sum(p, b, h) + sum(p, h + 1, c);
	}

}
int main()
{
	int a[] = { 1,5,2,5,4,1,2,6,9,7 };
	int b=sum(a, 0, 9);
	cout << b << endl;
}
4.二分查找
#include<iostream>
using namespace std;
int binsearch(int *p, int e,int b, int c)
{
	while (b < c)
	{
		int d = (b + c) / 2;
		if (p[d] < e)
			b = d+1;
		else
		{
			if (p[d] > e)
				c = d;
			if (p[d] == e)
			{
				return d;
				break;
			}
		}
	}
}
int main()
{
	int a[] = {1,2,3,4,5,6,7,8,9,10};
	int b=binsearch(a,6,0, 9);
	cout << b << endl;
}
5.归并排序
#include<iostream>
using namespace std;
void merge(int *p, int lo, int mi, int hi)
{
	int n1 = mi - lo + 1;
	int n2 = hi - mi;
	int *L = new int[n1 + 1];
	int *R = new int[n2 + 1];
	int i, j, k;

	for (i = 0; i<n1; i++) {
		L[i] = p[lo + i];
	}
	for (j = 0; j<n2; j++) {
		R[j] = p[mi + j + 1];
	}
	L[n1] = 10000000;
	R[n2] = 10000000;

	for (i = 0, j = 0, k = lo; k <= hi; k++)
	{
		if (L[i] <= R[j])
		{
			p[k] = L[i];
			i++;
		}
		else {
			p[k] = R[j];
			j++;
		}
	}

	delete[]L;
	delete[]R;

}
void mergesort(int *p,int lo, int hi)
{
	if ( lo < hi)
	{
		int mi = (hi + lo) / 2;
		mergesort(p, lo, mi);
		mergesort(p, mi+1, hi);
		merge(p, lo, mi, hi);
	}
}
int main()
{
	int a[] = {10,4,5,2,1,3,7,8,9,6};
	mergesort(a, 0, 9);
	for (int i = 0; i<10; ++i)
		cout << a[i] << " ";
	cout << endl;
}