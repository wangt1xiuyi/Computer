#include <iostream>  
using namespace std;

bool checkMahjong(char cards[], char count) {
	// 检测完毕，和牌  
	if (count == 0) return true;
	// 找到要检测的第一张牌  
	int current = 0;
	while (!cards[current]) current++;
	// 判断是否已提取过一对，并尝试提取  
	if (count % 3 == 2 && cards[current] >= 2) {
		cards[current] -= 2;
		if (checkMahjong(cards, count - 2)) return true;
		cards[current] += 2;
	}
	// 尝试提取三个相同的牌  
	if (cards[current] >= 3) {
		cards[current] -= 3;
		if (checkMahjong(cards, count - 3)) return true;
		cards[current] += 3;
	}
	// 尝试提取顺子  
	if (cards[current] >= 1 && cards[current + 1] >= 1 && cards[current + 2] >= 1) {
		cards[current] -= 1; cards[current + 1] -= 1; cards[current + 2] -= 1;
		if (checkMahjong(cards, count - 3)) return true;
		cards[current] += 1; cards[current + 1] += 1; cards[current + 2] += 1;
	}
	return false;
}

bool IsMahjonggWin(char *pCards) {
	// 初始化数据结构。每种类型的牌用一个0分割，这样判断顺子时就能无差别对待  
	char cards[29] = { 0 };
	char cardtable[128] = { 0 }; cardtable['D'] = 10; cardtable['W'] = 20;
	while (*pCards) {
		cards[*pCards - '0' + cardtable[*(pCards + 1)]]++;
		pCards += 2;
	}
	// 判断是否缺门。依据：统计缺门的数量  
	int i, j, count = 0;
	for (i = 0; i < 29; i += 10) {
		for (j = i; j < i + 9; j++) {
			if (cards[j]) break;
		}
		if (j == i + 9) count++;
	}
	if (count == 0) return false;
	// 判断是否七对。依据：数组中的值全为0、2、4  
	for (i = 0; i < 29; i++) {
		if (cards[i] != 0 && cards[i] != 2 && cards[i] != 4) break;
	}
	if (i == 29) return true;
	// 递归进行常规牌型判断  
	return checkMahjong(cards, 14);
}

int main(int argc, char* argv[])
{
	cout << "Expected = 1: 1D2D2D2D3D3D4D4D5D5D5D6D6D7D = " << IsMahjonggWin("1D2D2D2D3D3D4D4D5D5D5D6D6D7D") << endl;
	cout << "Expected = 0: 1D1D1D3D3D3D5D5D5D7D7D7D2W3W = " << IsMahjonggWin("1D1D1D3D3D3D5D5D5D7D7D7D2W3W") << endl;
	cout << "Expected = 1: 1T1T2T2T6T6T8T8T9T9T1D1D4D4D = " << IsMahjonggWin("1T1T2T2T6T6T8T8T9T9T1D1D4D4D") << endl;
	cout << "Expected = 0: 1T1T2T2T6T6T8T8T9T9T1D1D4W4W = " << IsMahjonggWin("1T1T2T2T6T6T8T8T9T9T1D1D4W4W") << endl;
	getchar();
	return 0;
}