/*
 队列使用时必须包含头文件 #include <queue> 有以下几种方法
 入队push(),出队pop(), 读取队首元素front(),读取队尾元素back() ，
 判断队是否有元素empty()
 求队列元素个数size() 
*/
#include <iostream>
#include <queue>
using namespace std;
int main()
{
  queue<int> one;
  one.push(1);
  one.push(2);
  one.push(3);
  cout<<"one 队列长度："<<one.size()<<endl;
  cout<<"队尾元素是："<<one.back()<<endl;
  cout<<"队头元素是："<<one.front()<<endl; 
  cout<<"队列是否为空(1为空，0为非空)："<<one.empty()<<endl;
  one.pop(); //删除是从队头元素开始的 
  cout<<one.front()<<endl;
  cout<<one.size()<<endl;
  //cout<<one.top()<<endl; //普通队列好像没有次方法 
  //优先队列的使用 优先队列中使用back、front 出现错误 
  priority_queue<int> three;
  three.push(10);
  three.push(20);
  three.push(30);
  cout<<"three 优先队列长度："<<three.size()<<endl;  
  cout<<"队列是否为空(1为空，0为非空)："<<three.empty()<<endl;
  while (false == three.empty())
  {
     cout<<three.top()<<endl;
     three.pop();
  }
  cout<<endl;
  system("pause");
  return 0; 
}
queue 模板类的定义在<queue>头文件中。
与stack 模板类很相似，queue 模板类也需要两个模板参数，一个是元素类型，一个容器类
型，元素类型是必要的，容器类型是可选的，默认为deque 类型。
定义queue 对象的示例代码如下：
queue<int> q1;
queue<double> q2;

queue 的基本操作有：
入队，如例：q.push(x); 将x 接到队列的末端。
出队，如例：q.pop(); 弹出队列的第一个元素，注意，并不会返回被弹出元素的值。
访问队首元素，如例：q.front()，即最早被压入队列的元素。
访问队尾元素，如例：q.back()，即最后被压入队列的元素。
判断队列空，如例：q.empty()，当队列空时，返回true。
访问队列中的元素个数，如例：q.size()




在<queue>头文件中，还定义了另一个非常有用的模板类priority_queue(优先队列）。优先队列与队列的差别在于优先队列不是按照入队的顺序出队，而是按照队列中元素的优先权顺序出队（默认为大者优先，也可以通过指定算子来指定自己的优先顺序）。
priority_queue 模板类有三个模板参数，第一个是元素类型，第二个容器类型，第三个是比较算子。其中后两个都可以省略，默认容器为vector，默认算子为less，即小的往前排，大的往后排（出队时序列尾的元素出队）。
定义priority_queue 对象的示例代码如下：
priority_queue<int> q1; priority_queue< pair<int, int> > q2; // 注意在两个尖括号之间一定要留空格。
priority_queue<int, vector<int>, greater<int> > q3; // 定义小的先出队
priority_queue 的基本操作与queue 相同。初学者在使用priority_queue 时，最困难的可能就是如何定义比较算子了。如果是基本数据类型，或已定义了比较运算符的类，可以直接用STL 的less 算子和greater算子――默认为使用less 算子，即小的往前排，大的先出队。如果要定义自己的比较算子，方法有多种，这里介绍其中的一种：重载比较运算符。优先队列试图将两个元素x 和y 代入比较运算符(对less 算子，调用x<y，对greater 算子，调用x>y)，若结果为真，则x 排在y 前面，y 将先于x 出队，反之，则将y 排在x 前面，x 将先出队。