1.类方法就是静态成员函数
2.成员函数被重载的特征：
1）相同范围（在同一个类中）
2）函数名字相同；
3）参数不同
4）virtual关键字可有可无
3.覆盖是指派生类函数覆盖基类函数：
1）不同的范围（分别位于基类和派生类）；
2）函数名字相同；
3）参数相同；
4）基函数必须有virtual关键字
4“隐藏”是指派生类屏蔽了其同名的基类函数：
1）如果派生类的函数与基类的函数同名，但是参数不同，此时无论有无virtual关键字，基类的函数将被隐藏
2）如果派生类的函数与基类的函数同名，且参数相同，但是基类函数没有virtual关键字，此时，基类的函数被隐藏
5.在if与else之间如果有多条语句，则必须使用复合语句。否则程序语法错误。
6.c/c++本身都没有为输入输出提供专门的语句结构，输入输出不是由c++本身定义的，而是在编译系统提供的I/O库中定义的。
c/c++控制输入输出的流操作符
7.c ++规定虚函数在派生类中重新定义时，其函数原型，包括函数类型、函数名、参数个数、参数类型的顺序，
都必须与基类中的原型完全相同
8.纯虚函数可以让类先具有一个操作名称，而没有操作内容，让派生类在继承时再去具体地给出定义。凡是含有纯虚函数的类叫做 抽象类 。
这种类不能声明对象，只是作为基类为派生类服务。除非在派生类中完全实现基类中所有的的纯虚函数，否则，派生类也变成了抽象类，
不能实例化对象。
9.x|(x+1)统计x二进制数中，0的个数
  x&（x-1）统计x二进制数中，1的个数
10.虚函数的动态绑定仅在 基类指针或引用绑定派生类对象时发生 ，fun的形参不是指针，所以调用哪个版本的函数编译时就已经确定，
根据形参静态类型确定调用B0的成员。

11.指针和引用的区别 
★ 相同点：
1. 都是地址的概念；
指针指向一块内存，它的内容是所指内存的地址；引用是某块内存的别名。
★ 区别：
1. 指针是一个实体，而引用仅是个别名；
2. 引用使用时无需解引用(*)，指针需要解引用；
3. 引用只能在定义时被初始化一次，之后不可变；指针可变；
5. 引用不能为空，指针可以为空；
6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小；
7. 指针和引用的自增(++)运算意义不一样；
8.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。

12.虚拟地址空间。num地址的值相同，但是其真实的物理地址却不一样。linux下实现了一下，发现地址值真的一样。
fork之后子进程复制了父进程的数据、堆栈。但是由于地址重定位器之类的魔法存在，所以，看似一样的地址空间（虚拟地址空间），
其实却是不同的物理地址空间。同时可以验证c程序中输出的地址空间其实都是虚拟地址空间。

13.switch后面的“表达式”，可以是int、char和枚举型中的一种，不能是float
型变量，所以A是非法的；case后面必须是“常量表达式”。

14.m%n等价于m&(n-1),要求A>0且n为2的整数次方

15.a 指向数组第一个元素 
p = a
*(p++) 这里是先取p值做解引用，然后p再自增
如果是*(++p) 则是p自增后，再做解引用
*(p+1) 则是对(p+1)的值解引用

15.linux下double的对齐方式是4字节，而windows默认是8字节。。。
linux可以通过如下方式控制对齐方式。
而WINDOWS是通过 #pragma pack(n)　来控制编译器按照n个字节对齐。
但是如果按照大家比较能够理解的说法：
根据以下条件进行计算： 
1、  结构体的大小等于结构体内最大成员大小的整数倍 
2、  结构体内的成员的首地址相对于结构体首地址的偏移量是其类型大小的整数倍，
比如说double型成员相对于结构体的首地址的地址偏移量应该是8的倍数。 
3、  为了满足规则1和2编译器会在结构体成员之后进行字节填充！ 

16.编译器在为类对象分配栈空间时，会先检查类的析构函数的访问性，其实不光是析构函数，只要是
非静态的函数，编译器都会进行检查。如果类的析构函数是私有的，则编译器不会在栈空间上为类对象
分配内存。 因此，将析构函数设为私有，类对象就无法建立在栈（静态）上了，只能在堆上（动态new）
分配类对象 

17.如果想以输入方式打开，就用ifstream来定义;
如果想以输出方式打开，就用ofstream来定义;
如果想以输入/输出方式来打开，就用fstream来定义。
ios::in：　　　 文件以输入方式打开(文件数据输入到内存)
ios::out：　　　文件以输出方式打开(内存数据输出到文件)
可以用“或”把以上属性连接起来，如ios::in|ios::out
18.控制小数输出精度：cout<<setiosflags(ios::fixed)<<setprecision(2);//需要头文件#include <iomanip>
19.静态成员变量必须在类外初始化，静态成员常量在类中初始化
20.友元关系是单向的，不是对称，不能传递。
21.优先级
1）.     ()    []     .     ->
2）.     !     ~     ++     --     +     -     *     &    (type)    sizeof--非常爱考 
3）.     *     /     %
4）.     +     -
5）.     >>     <<
6）.     >     >=     <     <= 
7）.     ==    !=
8）.     &
9）.     ^
10）.    |
11）.    &&
12）.    ||
13）.    ? :
14）.    =     *=     /=     %=     +=     -=     >>=     <<=     &=     ^=     |= 
15）.    ，
22.常见见算法
折半搜索        T(n)=T(n/2)+O(1)     O(log(n))		情形二（k = 0）
二叉树遍历	T(n)=2T(n/2)+O(1)    O(n)		情形一
归并排序	T(n)=2T(n/2)+O(n)    O(nlog(n))		情形二（k = 0）
22.char *p="Turbo C"的含义是将字符串赋给字符型指针变量 p(错);是把首地址赋给指针
23.在类的成员函数中能不能调用delete this？答案是肯定的，能调用，而且很多老一点的
库都有这种代码。假设这个成员函数名字叫release，而delete this就在这个release方法中
被调用，那么这个对象在调用release方法后，还能进行其他操作，如调用该对象的其他方法么？
答案仍然是肯定 的，调用release之后还能调用其他的方法，但是有个前提：被调用的方法不涉
及这个对象的数据成员和虚函数。说到这里，相信大家都能明白为什么会这样了。

根本原因在于delete操作符的功能和类对象的内存模型。当一个类对象声明时，系统会为其分配内存空间。
在类对象的内存空间中，只有数据成员和虚函数表指针，并不包含代码内容，类的成员函数单独放在代码段中。
在调用成员函数时，隐含传递一个this指针，让成员函数知道当前是哪个对象在调用它。
当调用delete this时，类对象的内存空间被释放。在delete this之后进行的其他任何函数调用，
只要不涉及到this指针的内容，都能够正常运行。一旦涉及到this指针，如操作数据成员，调用虚函数等，就会出现不可预期的问题。
为什么是不可预期的问题？delete this之后不是释放了类对象的内存空间了么，那么这段内存应该已经还给系统，不再属于这个进程。
照这个逻辑来看，应该发生指针错误，无访问权限之类的令系统崩溃的问题才对啊？这个问题牵涉到操作系统的内存管理策略。
delete this释放了类对象的内存空间，但是内存空间却并不是马上被回收到系统中，可能是缓冲或者其他什么原因，
导致这段内存空间暂时并没有被系统收回。此时这段内存是可以访问的，你可以加上100，加上200，但是其中的值却是不确定的。
当你获取数据成员，可能得到的是一串很长的未初始化的随机数；访问虚函数表，指针无效的可能性非常高，造成系统崩溃。

大致明白在成员函数中调用delete this会发生什么之后，再来看看另一个问题，如果在类的析构函数中调用delete this，会发生什么？
实验告诉我们，会导致堆栈溢出。原因很简单，delete的本质是“为将被释放的内存调用一个或多个析构函数，
然后，释放内存” (来自effective c++)。显然，delete this会去调用本对象的析构函数，而析构函数中又调用delete this，形成无限递归，
造成堆栈溢出，系统崩溃。
24.在《C和指针》这本书里有介绍，int *p1=new int[10];该语句给指针p1分配内存，没有对指针初始化， int *p2=new int[10]();该语句给指针p2分配内存，并初始化指针
25.静态数据成员在类外初始化，不必再加static关键字 为什么？因为静态成员属于整个类，而不属于某个对象，如果在类内初始化，会导致每个对象都包含该静态成员，这是矛盾的。
26.软件的特性：复杂性、一致性、可变性
27.int *pa[5]，首先[]优先级比*高，所以pa与[]先结合，pa[5]表明pa是一个数组，大小是5，既然知道pa是数组了，接下来就是确认数组元素了，int*表明数组元素是指针;
int（*p）[5]，首先()优先级比[]高，所以pa先与*结合，*pa表明pa是一个指针，既然知道pa是指针，接下来确认指针指向的数据类型，int [5]表明指针指向大小为5的int型数组。
28.int *s[8]; //定义一个指针数组，该数组中每个元素是一个指针，每个指针指向哪里就需要程序中后续再定义了。 
   int (*s)[8]; //定义一个数组指针，该指针指向含8个元素的一维数组（数组中每个元素是int型）
29.引用只是一个别名，是已有变量的别名，而void类型是空类型，是没有分配内存的。所以引用不能是void类型。
30.编译不通过主要是语句 this=NULL; 因为类的构造函数中，this 指针的形式为Myclass *const this; 它是一个常量指针，指针的指向不能修改。
31.cdecl 是 C 语言的调用方式，函数参数从右到左求值，然后入栈，参数由调用方负责清理，传多少参数其实都无所谓的，于是就支持所谓的可变长度的参数；stdcall 是 C++ 
的调用方式，参数从右到左求值，入栈，由被调用方处理参数，所以参数个数类型都必须匹配；pascal 是对 PASCAL 函数的调用方式，参数自左向右求值，其他类似于 stdcall；
而 fastcall 的情况忽略。
32.virtual 函数是动态绑定，而缺省参数值却是静态绑定。 意思是你可能会 在“调用一个定义于派生类内的virtual函数”的同时，却使用基类为它所指定的缺省参数值。
结论：绝不重新定义继承而来的缺省参数值！（可参考《Effective C++》条款37）
33.死代码主要是指1. 执行不到的代码. 2. 执行得到， 但没有任何作用的代码。 总而言之一句话： 死代码就是“不产生实际作用”的代码, 比如if(0){…}，大括号里的就是死代码。
34.http://blog.csdn.net/szchtx/article/details/21647159
双斜杠之后的www.csdn.net被当做注释了，那么前面的http:是否合法？这就是C++中一个几乎不会被用到的语法，标签。
带标签的语句是一种特殊的语句，在语句前面有一个标识符（即标签，上段代码中的http）和一个冒号。使用goto label就可以跳到标签处执行，比如可以在代码中写goto http，这样
就会执行cout语句了。case就是一种标签，case关键字和它对应的值一起，称为case标签。类中的public、private、protect也是标签，称为成员访问标签。
35.(1) 友元关系不能被继承。
(2) 友元关系是单向的，不具有交换性。若类B是类A的友元，类A不一定是类B的友元，要看在类中是否有相应的声明。
(3) 友元关系不具有传递性。若类B是类A的友元，类C是B的友元，类C不一定是类A的友元，同样要看类中是否有相应的申明。
36.C语言中的未定义行为（Undefined Behavior）是指C语言标准未做规定的行为。同时，标准也从没要求编译器判断未定义行为，所以这些行为有编译器自行处理，在不同的编译器可能
会产生不同的结果，又或者如果程序调用未定义的行为，可能会成功编译，甚至一开始运行时没有错误，只会在另一个系统上，甚至是在另一个日期运行失败。
1）同一运算符中多个操作数的计算顺序（&&、||、?和,运算符除外）
2）函数各参数的求值顺序
3）通过指针直接修改 const 常量的值
37.++ 是一目运算符，自增运算，它只能用于一个变量，即变量值自增1， 不能用于表达式。
++(a++) 里，小括号优先。
(a++) 是 表达式，按运算规则，不能对 表达式 作 自增运算.
38.c ++规定虚函数在派生类中重新定义时，其函数原型，包括函数类型、函数名、参数个数、参数类型的顺序，都必须与基类中的原型完全相同
39.声明枚举的几种形式：
1、先声明枚举类型后定义枚举类型变量
enum WeekdayType  
{  
    sun,mou,tue,wed,thu,fri,sat  
};  
enum WeekdayType today,yesterday,tomorrow;
2、声明枚举类型的同时定义枚举类型变量
enum WeekdayType  
{  
    sun,mou,tue,wed,thu,fri,sat   
}today,yesterday,tomorrow;
3、直接定义枚举类型变量
enum  
{  
    sun,mou,tue,wed,thu,fri,sat  
}today,yesterday,tomorrow;
40.其实刚刚fork出来不止虚拟地址一样，物理地址也一样。当进程发生分歧时，即修改此变量时，才会分配不同的物理地址，也就是copy-on-write，写时复制。
41.位域：所谓”位域“是把一个字节中的二进位划分为几 个不同的区域， 并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。  
实际上是C语言提供的一种数据结构。使用位域的好处是：   
  1）有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态， 用一位二进位即可。这样节省存储空间，而且处理简便。 这样就可以把几个不同的对象用一个字节的二进制位域来表示。
  2）可以很方便的利用位域把一个变量给按位分解。比如只需要4个大小在0到3的随即数，就可以只rand()一次，然后每个位域取2个二进制位即可，省时省空间。
由于下面这些与实现有关的依赖性，位域在不同的系统中有不同的结果。
1）int 位域被当作有符号数还是无符号数（vs、GNU C中int为-4，3;）
2）位域中的最大数目。32 位 ， 16位，64 位机
3）位域中的成员在内存中是从左向右分配，还是从右向左分配
4）当一个声明指定了两个位域，第二个位域比较大，无法容纳于第一个位域剩余的位时（如：32位），编译器有可能把第二个位域放在内存的下一个字，也有可能直接放在第一个位域的后面

1.一个位域宽度应该不比它的类型宽度还要宽
2.取地址操作符&不能应用在位域字段上;
3.位域字段不能是类的静态成员;
4.位域字段在内存中的位置，和大小端有关
5.位域的对齐(这里有一个非常重要的前提：位域的标准类型是int, signed int, unsigned int, 即对齐宽度是sizeof(int))

40.当用函数做实参时，编译器一般会根据参数传递顺序，先计算出函数的返回值，然后将返回值传递给原来的函数。
41.无论是static还是非static的全局变量，如果不加限制随意访问的话易出现同步问题。
   无论是static还是非static的局部变量，每个线程都是私有的，其他线程不会对其进行干扰。
42.浮点数
　 1）对于32位单精度浮点数，sign是1位，exponent是8位（指数偏移量是127），fraction是23位。对于64位双精度浮点数，sign是1为，exponent是11位（指数偏移量是1023），fraction是52位。
   2）这里所填的指数并不是前面算出来的实际指数，而是等于实际指数加上一个数（指数偏移），偏移量为2^(e-1)-1，其中e是exponent的宽度（位数）
一般提到浮点数的精度（有效位数）的时候，总是会出现 float的有效位为6~7位, double的有效位为15~16位 。
43.默认的拷贝构造函数是浅拷贝，直接把指针的值复制了一份。
44.友元函数重载时,参数列表为1,说明是1元,为2说明是2元，友元函数至少一个参数。
成员函数重载时,参数列表为空,是一元,参数列表是1,为2元
45.类方法即静态函数，实例方法即普通函数成员
46.c++中规定，重载运算符必须和用户定义的自定义类型的对象一起使用。
47.自动变量，只在定义它们的时候才创建，在定义它们的 函数 返回时系统回收变量所占 存储空间 。对这些变量 存储空间 的分配和回收是由系统自动完成的。一般情况下，不作专门说明的 局部
变量 ，均是自动变量。自动变量也可用关键字auto作出说明 
48.当说明一个共用体变量时系统分配给它的内存是成员中占内存最大者所需的容量的整数倍。
49 在c++语言中，这种多态性可以通过强制多态、重载多态、类型参数化多态、包含多态4种形式来实现。
类型参数化多态和包含多态统称为一般多态性，用来系统地刻画语义上相关的一组类型。
重载多态和强制多态统称为特殊多态性，用来刻画语义上无关联的类型间的关系
50.C++中可以省去struct关键字但是C中不行;因为没有说明是什么语言所以不能省略struct。
51.
extern int a;//声明一个全局变量a
int a; //定义一个全局变量a
extern int a =0 ;//定义一个全局变量a 并给初值。
int a =0;//定义一个全局变量a,并给初值，
定义变量和声明变量的区别在于定义会产生内存分配的操作，是汇编阶段的概念；而声明则只是告诉包含该声明的模块在连接阶段从其它模块寻找外部函数和变量。
规则1　头文件(.h)中是对于该模块接口的声明，接口包括该模块提供给其它模块调用的外部函数及外部全局变量，对这些变量和函数都需在.h中文件中冠以extern关键字声明；
规则2 模块内的函数和全局变量需在.c文件开头冠以static关键字声明；
规则3 永远不要在.h文件中定义变量；
规则4 如果要用其它模块定义的变量和函数，直接包含其头文件即可。
https://www.cnblogs.com/chengmin/archive/2011/09/26/2192008.html
52.C语言中的const是运行时const，编译时只是定义，在运行才会初始化。C语言中const变量不能用于成为数组长度等作为编译时常量的情况，原因就在此。
C语言const变量在运行时改变了是可以再次读出改变后的值的。C++中，const变量是编译时的常量，可以向#define定义的常量一样使用。故C++中const变量
的值在编译时就已经确定了，直接对cosnt变量进行了值的替换，因此当const变量的值改变时，const的变量值是不会得到更新的。这几行代码在C和C++中都
会改变const变量的值，只不过C++中const变量在编译的时候已经确定了，而C中的const变量可以在运行时改变后再次读取。
53.main函数可以调用自己，函数调用本身叫做函数的递归。和普通的函数递归调用一样，只要设置结束条件即可
54.初始化为NULL(0)的类指针可以安全的调用不涉及类成员变量的类成员函数而不出错，但是如果类成员函数中调用了类成员变量则会出错，原因是调用成员函数的时候，函数地址是编译期间确定的，
成员函数不通过对象指针去调用，对象指针仅仅作为参数传入函数然后去调用成员变量。而如果是虚函数，需要通过this去计算vptr，然后找到vtable，而this为NULL，因此会报错。
55.柔性数组有很多表现形式：
    //uni-dimensional
    int a[0]; //等同于int a[] = {};
    //multi-dimensional
    int a[0][5]; //等同于 int a[][5] = {};
    //involved in a struct
    struct s {
        int a[0]; //等同于 int a[]
    };
用柔性数组的目的往往是为了在struct的尾部链接一个可变长数组
这样就既能让数组可变长，又能保证结构体各成员内存空间上的连续性
56.静态函数属于类本身，不与类绑定，因此不能用this指针。
  在类定义时，无法使用构造函数，因而无法完成对象的初始化
  一般成员变量需要在类内进行初始化
  静态成员变量必须在类外初始化，静态成员常量在类中初始化。
57.在构造函数不要调用虚函数。在基类构造的时候，虚函数是非虚，不会走到派生类中，既是采用的静态绑定。显然的是：当我们构造一个子类的对象时，先调用基类的构造函数，构造子类中基类
部分，子类还没有构造，还没有初始化，如果在基类的构造中调用虚函数，如果可以的话就是调用一个还没有被初始化的对象，那是很危险的，所以C++中是不可以在构造父类对象部分的时候调用子
类的虚函数实现。但是不是说你不可以那么写程序，你这么写，编译器也不会报错。只是你如果这么写的话编译器不会给你调用子类的实现，而是还是调用基类的实现。在析构函数中也不要调用虚
函数。在析构的时候会首先调用子类的析构函数，析构掉对象中的子类部分，然后在调用基类的析构函数析构基类部分，如果在基类的析构函数里面调用虚函数，会导致其调用已经析构了的子类对
象里面的函数，这是非常危险的。
58.执行a<<b时，编译器会先将b与31进行and操作，以限制左移的次数小于等于31。b&31=0，则a<<b=1
执行1<<32时，编译器直接执行算术左移的操作。

59.为什么虚函数调用要使用指针或引用。
1.默认的赋值运算符并不会操作虚函数表。
2.要实现多态，必须使用指针或者引用。
3.即使重载一个赋值运算符，对象不能直接使用虚函数表，因为编译器硬编码，后期的函数执行不经过虚函数表了。

60.因为使用 inline 关键字的函数只是用户希望它成为内联函数，但编译器有权忽略这个请求，比如：若此函数体太大，则不会把它作为内联函数展开的。
61.++运算符的对象必须是左值，而表达式的值都是右值。
区分左值与右值的最简单方式就是：左值可以对其取地址赋值，右值不可以取地址。

62.如果大写字母变成小写字母时，就加32
63.分情况看待：
1：字符串长度比设定长度大就按字符串实际长度输出；
2：字符串长度比设定长度小就按右对齐输出该字串,左补空格。

64.
只能使用成员函数重载的运算符有：=、()、[]、->、new、delete。
保证原有运算符的性能，不改变其意义

65.虚函数表存放在哪里
1.虚函数表是全局共享的元素,即全局仅有一个.
2.虚函数表类似一个数组,类对象中存储vptr指针,指向虚函数表.即虚函数表不是函数,不是程序代码,不肯能存储在代码段.
3.虚函数表存储虚函数的地址,即虚函数表的元素是指向类成员函数的指针,而类中虚函数的个数在编译时期可以确定,即虚函数表的大小可以确定,即大小是在编译时期确定的,不必动态分配内存空间存
储虚函数表,所以不再堆中.
根据以上特征,虚函数表类似于类中静态成员变量.静态成员变量也是全局共享,大小确定.
所以我推测虚函数表和静态成员变量一样,存放在全局数据区.

c/c++程序所占用的内存一共分为五种:
栈区,堆区,程序代码区,全局数据区(静态区),文字常量区.
显而易见,虚函数表存放在全局数据区.
















