1.对于class X,如果没有任何user-declared constructor，那么会有一个default constructor被暗中声明出来...一个
被暗中声明出来的default constructor将是一个trivial（浅薄而无能，没啥用的）constructor;

当编译器需要它的时候，default constructor才会被构造编译，并且被合成出来的constructor只执行
四种有用的nontrivial default constructor:
1）.带有Default Constructor的Member Class Object
如果一个class没任何constructor，但它内含一个member object,而后者有default constructor，那么这个class的implict
default constructor就是“nontrival"，编译器需要为此class合成一个default constructor。不过这个合成操作只有在constructor
真正需要被调用时才会发生。编译器通过把合成的默认构造函数、拷贝构造函数、析构函数、赋值构造函数以inline方式完成，而且编译器
合成的构造函数不会去初始化类数据成员，需要程序员自己去定义，如果已经定义，编译器会在其上进行扩展。

2）”带有Default Constructor"的Base Class
类似的道理，如果一个没有任何constructos的class派生自一个“带有default constructor"的base class,那么这个derived class的默认构造函数被视为
有用的，并因此需要被合成出来，它将调用上一层base classes的默认构造函数。对一个后继派生的calss而言，这个合成的constructor和一个
”被明确提供的default constructor"没有什么差异

3）带有一个“Virtual Function”的class
（1）class声明（或继承）一个virtual function
（2）class派生自一个继承串链，其中有一个或更多的virtual base classes.
不管哪一种情况，由于缺乏由user声明的construcors，编译器会详细记录合成一个默认构造函数的必要信息

4）带有一个"virtual Base class"的Class

https://www.cnblogs.com/QG-whz/p/4676481.html


2.拷贝构造函数三种情况下调用：
1）对一个object做明确的初始化操作；
2）当object被当做参数交给某个函数时；
3）函数传回一个class object时。
浅拷贝：
指对象复制时，只对对象中的数据成员进行简单的赋值，默认拷贝构造函数执行的也是浅拷贝；
深拷贝：
 在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而应该重新动态分配空间
 拷贝构造函数的几个细节：
 1）拷贝构造函数能调用private成员变量
 2）对于一个类X,对于一个类X, 如果一个构造函数的第一个参数是下列之一:
 a) X&
 b) const X&
 c) volatile X&
 d) const volatile X&
且没有其他参数或其他参数都有默认值,那么这个函数是拷贝构造函数.
 3)一个类中可以存在多个拷贝构造函数（例如const）
 4)如果一个类中没有定义拷贝构造函数,那么编译器会自动产生一个默认的拷贝构造函数。这个默认的参数可能为 X::X(const X&)或 X::X(X&),
 由编译器根据上下文决定选择哪一个。
 
 默认拷贝构造函数在有必要的时候被构造出来，必要是指class不展现位逐次拷贝时；
 以下四种情况class不展现出“bitwise copy semantics”（逐位拷贝）：
 1）当class内含一个member object而后者的class声明有一个copy constructor时（不论是class设计者明确地声明，
 像string;或是被编译器合成，像class Word那样）
 2）当class继承自一个base class，而后者存在有一个copy constructor时（再次强调，不论是被明确声明或是被合成而得）
 3）当class声明了一个或多个virtual functions时；
 4）当class派生自一个继承串链，其中有一个或多个virtua base classes时
 
 拷贝构造函数的应用，迫使编译器多多少少对你的代码做部分转化。尤其是当一个函数一传值的方式传回一个class object,而该class
 有一个拷贝构造函数（不论是函数的定义或使用上）。此外编译器也将拷贝构造函数的调用操作优化，一个额外的第一参数取代NRV。
 
 3.成员初始化列表
 必须使用成员初始化列表的情况：
 1）当初始话一个reference member时；
 2）当初始化一个const member时；
 3）当调用一个base class的constructor，而它拥有一组参数时；
 4）当调用一个member class的constructor，而它拥有一组参数时；
 初始化列表作用：编译器会一一操作初始化列表，以适当顺序（定义的顺序而不是列表顺序）在constructor之内安插初始化操作
 并且会在任何expli user code之前
 
 
 第三章 语意学
 一个类没有任何东西，它有一个byte，那是被编译器安插进去的一个char,这使得这个class的两个objects得以在内存中配置独一无二的地址
 一个class object必须有足够的大小以容纳它所有的nonstatic data members。有时候其值可能令你吃惊，原因是：
 1）编译器自动加上的额外data members，用以支持某些语言特性
 2）因为边界调整的需要；
 
 虚指针存放地址视编译器，传统的放在数据成员最后，现在普遍放在首地址；总之对与布局持的放任态度
 静态数据成员只有一份实体，放于数据段，没有this指针，因此可以直接靠class获取，靠class object同‘.'运算获取只是一种方便
 而对于非静态数据成员，主要通过隐含的数据指针this获取；欲对一个非静态变量进行存取操作，编译需要把class object的起始地址加上偏移量，
 一般还有一个-1操作，指向数据成员的指针，其offset值总是被加上1，这样可以使编译系统区分出“一个指向数据成员的指针，用以区分
 指出class的第一个指向data member的指针，以及没有指出任何data member的指针
 
 多层继承，按字节分隔，为的就是保持各自独立性，如果不使用填充隔离，那么可能会覆盖其本来的属性
 
 在cfront编译器中，vptr放置在class object的尾端，可以保留base class C struct的对象布局，因而允许在c程序代码中也能使用
 到c++2.0，开始支持虚拟继承以及抽象基类，并且由于oop的兴起，某些编译器开始把vptr放到了class object的起头处；丧失了c
 语言的兼容性
 
 第五章 构造、解构、拷贝语意学
1.不要把析构函数声明为纯虚函数（链接可能会出现找不到情形）
2.Explicit initialization list带来三项缺点：
1）只有当class members都是public时，此法才奏效；
2）只能指定常量，因为它们在编译时期就可以被评估求值
3）由于编译器并没有自动施行之，所以初始化行为的失败可能性会比较高一些

3.虚函数除了使得每一个class object多负担一个vptr之外，virtual function 的引入也引发编译器对于我们的Point class产生膨胀作用：
我们所定义的构造函数被附加了一些码，以便将vptr初始化。这些码必须被附加在任何base class constructors的调用之后，但必须在任何
由使用者供应的码之前；
 
4.构造函数调用真正伴随了什么：
1）.记录在成员初始化列表中的数据成员初始化操作会被放在构造函数的本身，并以成员的声明顺序进行；
2）.如果有一个member没有出现在成员初始化列表，但它有一个默认构造函数，那么该默认构造函数被调用；
3）.在那之前，如果class object有虚指针，它们必须被设定初值，指向适当的虚函数表
4）.在那之前，所有上一层的base class constructors必须被调用，以base class的声明顺序为顺序：
4.1）.如果base class被在成员初始化列表中，那么任何明确指定的参数都应该传递过去
4.2）.如果base class没在成员初始化列表中，但它有一个默认构造函数，那么该默认构造函数被调用；
4.3）.如果base class是多重继承下的第二或后继的base class，那么this指针必须有所调整
5）.在那之前，所有virtual base class constructors必须被调用，从左到右，从最深到浅：
5.1）.如果class被在成员初始化列表中，那么任何明确指定的参数都应该传递过去,如果class没在成员初始化列表中，
但它有一个默认构造函数，那么该默认构造函数被调用；
5.2）.此外，class中每一个virtual base class subobject的偏移必须在执行期可被存取；
5.3）.如果class object是最底层的class,其构造函数可能被调用，某些用以支持这个行为的机制必须被放进来。

5.vptr初始化时机：在base class constructors调用操作之后，但是在程序员供应的码或是成员初始化列表之前；
6.构造函数的执行算法通常如下：
1）.在derived class constructor中，“所有virtual base classes”及“上一层base class”的构造函数调用；
2）.上述完成之后，对象的vptr(s)被初始化，指向相关的虚函数表
3）.如果有成员初始化列表的话，将在构造函数体内扩展开。这必须在vptr被设定之后才进行，以免有一个虚函数成员被调用；
4）.最后，执行程序员所提供的码；

7.一个class对于默认的copy assignment operator，在以下情况不会表现出bitwise copy语意：
1）当一个class内带有一个member object,而其class有一个copy assignment operator时；
2）当一个class的base class有一个copy assignment operator时；
3）当一个class声明了任何virtual functions(不一定能拷贝右端class object的vptr地址，因为它可能是一个derived class object).
4）当class继承自一个virtual base class(不论此base class有没有赋值运算)；
 
析构函数：不是所有编译器都会生成析构函数，必要的时候才会生成；
1）.如果obeject内带一个vptr,那么首先重设相关的虚函数表。
2）.析构函数的本身现在被执行，也就是说vptr会在程序员的码执行前被重设
3）.如果class拥有member class objects,而后者拥有析构函数，那么它们会以其声明顺序的相反顺序被调用；
4）.如果有任何直接（上一层）非虚基类拥有析构函数，它们会以其声明顺序的相反顺序被调用
5）.如果有任何虚基类有析构函数，而当前讨论的这个class是最尾端的class,那么它们会以原来的构造顺序的相反顺序被调用

第六章 执行期语意学
1.c++程序中所有的globa objects都被放置在程序的data segment中。如果明确指定给他一个值，object将以该值为初值，否则object
所配置到的内存内容为0.
2.针对对象数组，如果类既没有定义一个构造函数也没有定义一个析构函数，那么只需要配置足够的内存以存储数据就行；
然而如果类明确定义了一个默认析构函数，所以这个析构必须轮流施行于每一个元素之上，一般而言这是经由一个或多个runtime library函数达成(vec_new(),vec_delete);
3.对于delete操作来说，如果删除指针为0，c++语言会要求运算符不要有操作，等指针所指对象因delete而结束，以后后继任何对指针的参考操作
就不再保证有良好的行为，并因此被视为一种不好的程序风格，因此最好把它再赋值为NULL;
4.对于base class指针指向一个drived class objects所组成的数组，析构的时候，调用不到drived class对应的class,因为vec_delete()
函数只保存了一个析构函数，不会转向调用，因此需要一个转换之后 ，再析构；
5.Placement Operator new 语意
有一个预习定义好的重载的new运算符，称为placement operator new.它需要第二个参数，类型为void *。调用方式如下：
                         Point2w *ptw=new(arena) Point2w;
其中arena指向内存中的一个区块，用以放置新产生出来的Point2w object.
 eg：
	A *a = (A*)malloc(sizeof(A));
	new(a) A;
当delete时，也会释放指针所指的内存，如果后面要继续用，就会出现问题，因此必须显示调用：a->~A;
一般情况下，placement new并不支持多态

6.T c=a+b；这种形式的一般编译器优化之后（NRV），不产生临时对象，但是同样意义的c=a+b，肯定会产生临时对象：
//T temp=a+b;
T temp;
temp.operator+(a,b);
//c=temp;
c.operator=(temp);
temp.T::~T();
7.临时对象的被摧毁，应该是对完整表达式求值过程中的最后一个步骤。
7.1）凡含有表达式执行结果的临时性对象，应该存留到object的初始化操作完成为止。
7.2）如果一个临时性对象被绑定于一个引用，对象将残留，直到被初始化之引用的生命结束，或直到临时对象的生命范畴结束--
视哪一种情况先到达而定。

第7章 站在对象模型的尖端
1.对于模板类来说，当数据成员具象之后，成员函数来说（至少未被使用过的）不应该被“实体”化。只有在成员函数被使用的时候
，c++标准才要求它们被“具现”出来，原因在于：
1）空间和时间效率的考虑。如果class中有100个成员函数，但只需要其中几个，全部“具现”将会花费大量的时间和空间。
2）尚未实现的机能。并不是一个template具现出来的所有类型就一定能够完整支持一组成员函数所需要的所有运算符。如果只“具现”
那些真正用到的成员函数，template就能够支持那些原本可能会造成编译时期错误的类型。
2.函数在什么时候“具现”出来：
1）在编译时候。那么函数将“具现”于origin和p存在的那个文件中
2）在链接时候，那么编译器会被一些辅助工具重新激活。template函数实体可能被放在这个文件中，别的文件中，或一个分离的存储位置
3.所有语汇错误和解析错误都会在处理template声明的过程中被表示出来，而那些与语法无关的错误，只有在特定实体被定义之后，
才会发出抱怨。
4.Template之中，对于一个nonmember name的决议结果是根据这个name的使用是否于”用以具现出该template的参数类型“有关而决定的。
因此一个编译器必须保持两个scope contexts：
1）."scope of the template declaration“，用以专注于一般的template class.（不相关）
2）."scope of the template instantiation“，用以专注于特定的实体（相关）
5.两个策略针对template function的具现：一个是编译器时期策略，程序代码必须在program text file中备妥可用；另一个是链接
时期策略，有一些metacompilation工具可以导引编译器的具现行为。
6.编译器如何找出函数的定义？
答案之一包含template program text file，就好像它是个header文件一样（Borland）。另一种方法是要求一个文件命名规则。
7.编译器如何能够只具现出程序中用到的member functions
解决办法之一就是，根本忽略这项要求，把一个已经具现出来的class的所有member functions都产生出来（Borland编译器。
另一种策略就是仿真链接操作，检测看看哪个函数真正需要，然后只为它产生实体（cfront）。
8.编译器如何阻止member definitions在多个.o文件中都被具现呢？
 解决办法之一就是产生多个实体，然后从链接器中提供支持，只留下其中一个实体。另一个办法就是由使用者来导引”仿真链家阶段“
 的具现策略，决定哪些实体才是所需求的。
9.Edison Design Group开发出一套第二代的directed-instantiation：
1）一个程序代码被编译时，最初并不会产生任何具现体，然而，相关信息已经被产生于object files之中。
2）当object files被链接在一块儿时，会有一个prelinker程序被执行起来。它会检查object files，寻找template实体的相互参数
以及对应的定义。
3）对于每一个”参考到template实体“而”该实体却没有定义“的情况，prelink将该文件视为与另一个文件（在其中，实体已经具现）同类。
以这种方法，就可以将必要的程序具现操作指定给特定的文件。这些都会注册在prelinker所产生的.ii文件中（放在磁盘目录ii_file）。
4）prelink重新执行编译器，重新编译每一个”.ii文件曾被改变过“的文件。这个过程不断重复，直到所有必要的具现操作都已完成。
5）所有的object files被链接成一个可执行文件。
9.1重新编译操作包括：
1）对于每一个将被重新编译的program text file,编译器检查其对应的.ii文件。
2）如果对应的.ii文件列出一组要被具现的templates，那些templates(而且也只有那些template)会在此次编译时被具现。
3）prelinker必须执行起来，确保所有被参考到templates已经被定义妥当。
10.如果一个virtual function被具现出来，其具现点紧跟在其class的具现点之后。
11.c++的exception handling由三个主要的词汇组件构成：
1）.一个throw子句。它在程序某处发出一个exception。被丢出去的exception可以是内建类型，也可以是使用者自定类型。
2）.一个或多个catch子句，每一个catch子句都是一个exception handler。它用来表示说，这个子句准备处理某种类型的exception,
并且在封闭的大括号段中提供实际的处理程序。
3）.一个try区段。它被围绕以一系列的叙述句，这些叙述句可能引发catch子句起作用。
当一个exception被丢出去时，控制权会从函数调用中被释放出来，并寻找一个吻合的catch子句。如果都没有吻合者，那么默认的处理
例程terminate()会被调用。当控制权被放弃后，堆栈中的每一个函数调用也就被推离，这个程序称为unwinding the stack。在每一个
函数被推理栈之前，函数的local class objects的destructor会被调用。
 
12.当一个exception发生时，编译系统必须完成以下事情：
1.检验发生throw操作的函数；
2.决定throw操作是否发生在try区段中；
3.若是，编译系统必须把exception type拿来和每一个catch子句比较；
4.如果比较吻合，流程控制应该交到catch子句手中；
5.如果throw的发生并不在try区段中，或没有一个catch子句吻合，那么系统必须（a）摧毁所有active local objects，（b）从
堆栈中将当前的函数”unwind“去掉.（c）进行到程序堆栈中的下一个函数中去，然后重复上述步骤2-5；
 
13.为保证安全的向下转型操作：
1）需要额外的空间以存储类型信息，通常是一个指针，指向某个类型信息节点；
2）需要额外的时间以决定执行期类型，因为，正如其名所示，还需要再执行期才能决定；
dynamic_cast运算符可以在执行期决定真正的类型；如果安全传回转型过后的指针，否则传回0；
如果dynamic_cast针对的是引用而不是地址，安全的会向下转换，如果不是安全的化，会丢出一个bad_cast exception。
 
14.typeid：获取一个类型的类型名称，头文件名<typeinfo>
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 