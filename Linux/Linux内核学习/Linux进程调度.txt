1.linux把进程区分为实时进程和非实时进程, 其中非实时进程进一步划分为交互式进程和批处理进程
2.根据进程的不同分类Linux采用不同的调度策略：
	1）对于实时进程，采用FIFO或者Round Robin的调度策略.
	2）对于普通进程，则需要区分交互式和批处理式的不同。传统Linux调度器提高交互式应用的优先级，使得它们能更快地被调度。而CFS和RSDL等新的调度器的核心思想
	是”完全公平”。这个设计理念不仅大大简化了调度器的代码复杂度，还对各种调度需求的提供了更完美的支持.
3.注意Linux通过将进程和线程调度视为一个，同时包含二者。进程可以看做是单个线程，但是进程可以包含共享一定资源（代码和/或数据）的多个线程。因此进程调度也包
含了线程调度的功能.
4.目前实时进程的调度策略比较简单, 因为实时进程值只要求尽可能快的被响应, 基于优先级, 每个进程根据它重要程度的不同被赋予不同的优先级，调度器在每次调度时,
 总选择优先级最高的进程开始执行. 低优先级不可能抢占高优先级, 因此FIFO或者Round Robin的调度策略即可满足实时进程调度的需求.
5.但是普通进程的调度策略就比较麻烦了, 因为普通进程不能简单的只看优先级, 必须公平的占有CPU, 否则很容易出现进程饥饿, 这种情况下用户会感觉操作系统很卡, 响应
总是很慢，因此在linux调度器的发展历程中经过了多次重大变动, linux总是希望寻找一个最接近于完美的调度策略来公平快速的调度进程.
6.由于进程优先级的最大值为139，因此MAX_PRIO的最大值取140(具体的是，普通进程使用100到139的优先级，实时进程使用0到99的优先级).
7.FIFO或Round Robin调度策略：
SCHED_FIFO  先入先出调度算法（实时调度策略），相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务
SCHED_RR	轮流调度算法（实时调度策略），后者提供 Roound-Robin 语义，采用时间片，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优
            先级的任务可以抢占低优先级的任务。不同要求的实时任务可以根据需要用sched_setscheduler() API设置策略
8.非实时进程的调度策略--CFS(参考了梯度算法)：完全公平策略
CFS是最终被内核采纳的调度器。它从RSDL/SD中吸取了完全公平的思想，不再跟踪进程的睡眠时间，也不再企图区分交互式进程。它将所有的进程都统一对待，这就是公平的
含义。CFS的算法和实现都相当简单，众多的测试表明其性能也非常优越。 
9.CFS
CFS的出发点基于一个简单的理念：进程调度的效果应如同系统具备一个理想中的完美多任务处理器。在这种系统中，每个进程将能获得1/n的处理器时间---n是指可运行进程的
数量。CFS允许每个进程进程运行一段时间、循环轮转、选择运行最少的进程作为下一个运行进程，而不再采用分配给每个进程时间片的做法了。CFS在所有可运行进程总数基础
上计算出一个进程应该运行多久，而不是依靠nice值来计算时间片。nice值在CFS中被作为进程获得的处理器运行比的权重。最小粒度为1ms。
10.CFS调度实现：时间记账、进程选择、调度器入口、睡眠和唤醒
1）时间记账
CFS不再有时间片的概念，为了需要确保每个进程只在公平分配给它的处理器时间内运行。CFS使用调度器实体结构来追踪进程运行记账。
调度器实体结构嵌入再进程描述符struct task_struct内；调度器实体结构使用vruntime变量记录一个程序到底运行了多长时间以及它
还应该再运行多久。
2）进程选择
当CFS需要选择下一个运行进程时，它会挑一个具有最小vruntime的进程。利用红黑树组织可运行进程队列，并利用其迅速找到最小vruntime
值的进程。运行rbtree树中最左边叶子节点所代表的那个进程
3）调度器入口
主要是函数schedule()函数：找到最高优先级的调度类，后者需要有自己的可运行的队列，然后询问谁才是下一个该运行的进程。
4）睡眠和唤醒
进程把自己标记成休眠状态，从可执行红黑树中移出，放入等待队列，然后调用schedule()选择和执行一个其他进程。唤醒相反，进程被设置为
可执行状态，然后再从等待队列中移到可执行红黑树中。
11.进程调度时机：
1）中断处理过程（包括时钟中断、I/O中断、系统调用和异常）中，直接调用schedule()，或者返回用户态时根据need_resched标记调用schedule()；
2）内核线程可以直接调用schedule()进行进程切换，也可以在中断处理过程中进行调度，也就是说内核线程作为一类的特殊的进程可以主动调度，也可以被动调度；（内核线程是只有
内核态没有用户态的特殊进程）
3）用户态进程无法实现主动调度，仅能通过陷入内核态后的某个时机点进行调度，即在中断处理过程中进行调度。（用户态进程只能被动调度）




























































