1.信号：很短的消息，可以被发送给一个进程或一组进程，实际为一个数。
2.信号目的：
	1）让进程知道已经发生了一个特定的事件；
	2）强迫进程执行它自己代码中的信号处理程序。
3.常用的信号：
	SIGHUP 挂起终端或进程        SIGINT 来自键盘的中断           SIGKILL 强迫进程终止（不可忽略）                SIGPIPE 向无读者的管道写
	SIGALRM 实时定时器时钟       SIGTERM 进程终止                SIGCHLD 子进程停止、结束或在被跟踪时获得信号    SIGURG  套接字的紧急条件
	SIGTTIN  从后台进程请求输入   SIGTTOU 后台进程请求输出       SIGIO  I/O现字可能发生                          SIGSTOP 停止进程执行（不可忽略）
4.进程以三种方式执行一个信号做出应答：
	1）显示地忽略
	2）执行缺省操作
	3）通过调用相应的信号处理函数捕获信号
POSIX标准对多线程应用的信号处理要求：
	1）信号处理函数程序必须在多线程应用的所有线程之间共享。
	2）每个发送给多线程应用的信号仅传递给一个线程，由不阻塞该信号的线程任意选择
	3）如果多线程应用发送了一个致命信号，那么内核将杀死所有线程，而不是仅仅杀死接收信号的那个线程。
5.设定sa_handler时，如果为SIG_DFL则为执行缺省操作，而SIG_IGN时则执行忽略操作；
6.捕获一个信号的函数的执行流：
	1）一个非阻塞的信号发送给一个进程，当中断或异常发生时，进程切换到内核态。
	2）正要返回到用户态前，内核执行do_signal函数，这个函数依次处理信号和建立用户态堆栈（调用setup_frame()函数）。
	3）当进程又切换到用户态时，因为信号处理程序的地址被强制放进程序计数器中，因此开始执行信号处理程序。
	4）当处理程序终止时，setup_frame函数放在用户态堆栈中的返回代码被执行。
	5）这个代码调用sigreturn或rt_sigreturn()系统调用，相应的服务例程把正常用户态堆栈硬件上下文拷贝到内核态堆栈中，并把用户堆栈恢复到它原来的状态
	6）当这个系统调用结束时，普通进程就因此能恢复自己的执行。
7.与信号相关的系统调用
	1）kill(pid,sig):向普通进程或多线程应用发送信号
		pid>0:把sig信号发送到其PID等于pid的进程所属的线程组
		pid=0:把sig信号发送到与调用进程同组的进程的所有线程组
		pid=-1:把信号发送到所有进程，除了0，1和current以外
		pid<0:把信号发送到进程组-pid中进程的所有线程组
	2）sigaction(sig,act,oact)：系统调用允许用户为信息指定一个操作
	3）创建信号集函数有如下5个：
		sigemptyset：初始化信号集合为空。
		sigfillset：把所有信号加入到集合中，信号集中将包含Linux支持的64种信号。
		sigaddset：将指定信号加入到信号集合中去。
		sigdelset：将指定信号从信号集中删去。
		sigismember：查询指定信号是否在信号集合之中。
补充：
8.kill -l 查看信号种类，1-64，缺失32、33；前34为普通信号，34以上的为实时信号，通过 man 7 signal可以查看具体信息
9.通过位图进行标记，1为收到，0未收到
10.信号产生的方式：
	1）通过终端按键（组合键）产生信号
	2）硬件异常产生的信号
	3）调用系统函数向进程发信号
	4）由软件条件产生信号
11.核心转储core dumped：当一个进程要异常终止时，可以选择把进程的用户空间内存数据全部保存到磁盘上，文件名通常是core，这叫做Core Dump。
						也叫核心转储，帮助开发者进行调试，在程序崩溃时把内存数据dump到硬盘上，让gdb识别。
   文件保存的地方，可以在/proc/sys/kernel/core_pattern中查看
   修改存储位置：echo "/home/python/core.%e.%p" > /proc/sys/kernel/core_pattern中
12.查看系统限制：ulimit -a;更改core文件大小，ulimit -c n:n字节大小 ：临时有效 --->永久有效 /etc/profile添加 ulimit -c unlimited 

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	